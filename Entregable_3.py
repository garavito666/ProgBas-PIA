# -*- coding: utf-8 -*-
"""Entregable3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BKeKKNDesuDQqJnDaGm4nrxm-x_KTpxo

# **Entregable Semana 3**

# **üìä Nuevo Script de An√°lisis de Datos Meteorol√≥gicos**
Este script:

Lee archivos .csv y .json.

Extrae campos num√©ricos (temperatura, humedad, presi√≥n).

Calcula:

Media y desviaci√≥n est√°ndar de la temperatura.

Humedad promedio.

Presi√≥n m√≠nima y m√°xima.

**C√≥digo principal**: Es necesario para generar los archivos que el script de an√°lisis leera para recolectar los datos necesarios.
"""

import requests
import json
import csv
from datetime import datetime, timezone
import time

API_key = "f0f0c07c117721896152aeca0fbbe31a"

def obtener_clima_actual(ciudad):
    url = f"https://api.openweathermap.org/data/2.5/weather?q={ciudad}&units=metric&appid={API_key}"
    res = requests.get(url)
    if res.status_code != 200:
        print("‚ùå Ciudad no encontrada o error en la petici√≥n.")
        return None
    data = res.json()
    temperatura = data["main"]["temp"]
    humedad = data["main"]["humidity"]
    presion = data["main"]["pressure"]
    return {
        "fecha": datetime.now().strftime("%Y-%m-%d"),
        "ciudad": ciudad,
        "temperatura": temperatura,
        "humedad": humedad,
        "presion": presion,
        "tipo": "actual"
    }

def obtener_pronostico(ciudad):
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={ciudad}&units=metric&appid={API_key}"
    res = requests.get(url)
    if res.status_code != 200:
        print("‚ùå Ciudad no encontrada o error en la petici√≥n.")
        return []
    data = res.json()
    pronosticos = []

    # Queremos solo 1 pron√≥stico por d√≠a a las 18:00 hrs
    fechas_procesadas = set()
    for item in data["list"]:
        dt_txt = item["dt_txt"]  # formato 'YYYY-MM-DD HH:MM:SS'
        fecha_str, hora_str = dt_txt.split()
        if hora_str == "18:00:00" and fecha_str not in fechas_procesadas:
            fechas_procesadas.add(fecha_str)
            pronosticos.append({
                "fecha": fecha_str,
                "ciudad": ciudad,
                "temperatura": item["main"]["temp"],
                "humedad": item["main"]["humidity"],
                "presion": item["main"]["pressure"],
                "tipo": "pronostico"
            })
    return pronosticos

def guardar_csv(nombre_archivo, datos):
    campos = ["fecha", "ciudad", "temperatura", "humedad", "presion", "tipo"]
    try:
        with open(nombre_archivo, mode='w', newline='', encoding='utf-8') as archivo:
            writer = csv.DictWriter(archivo, fieldnames=campos)
            writer.writeheader()
            writer.writerows(datos)
        print(f"‚úÖ Datos guardados en {nombre_archivo}")
    except Exception as e:
        print(f"‚ùå Error al guardar CSV: {e}")

def guardar_json(nombre_archivo, datos):
    try:
        with open(nombre_archivo, mode='w', encoding='utf-8') as archivo:
            json.dump(datos, archivo, indent=4)
        print(f"‚úÖ Datos guardados en {nombre_archivo}")
    except Exception as e:
        print(f"‚ùå Error al guardar JSON: {e}")

def main():
    ciudad = input("üèôÔ∏è Introduce el nombre de la ciudad para obtener el clima: ").strip()
    if not ciudad:
        print("‚ùå Debes ingresar un nombre de ciudad v√°lido.")
        return

    clima_actual = obtener_clima_actual(ciudad)
    if clima_actual is None:
        return

    pronostico = obtener_pronostico(ciudad)
    if not pronostico:
        print("‚ö†Ô∏è No se pudo obtener pron√≥stico, solo se guardar√° el clima actual.")
        datos_guardar = [clima_actual]
    else:
        datos_guardar = [clima_actual] + pronostico

    # Guardar en archivos fijos sin fecha ni hora en el nombre
    guardar_csv("clima_datos.csv", datos_guardar)
    guardar_json("clima_datos.json", datos_guardar)

    print("\nüìä Clima actual y pron√≥stico (solo temperaturas y humedad):")
    for dato in datos_guardar:
        tipo = "Actual" if dato["tipo"] == "actual" else "Pron√≥stico"
        print(f"{tipo} - {dato['fecha']} - {dato['ciudad']}: {dato['temperatura']}¬∞C, Humedad: {dato['humedad']}%, Presi√≥n: {dato['presion']} hPa")

if __name__ == "__main__":
    main()

"""**Script de an√°lisis:**"""

import csv
import json
import statistics

def leer_datos_csv(nombre_archivo):
    datos = []
    try:
        with open(nombre_archivo, mode='r', encoding='utf-8') as archivo:
            lector = csv.DictReader(archivo)
            for fila in lector:
                datos.append({
                    "fecha": fila["fecha"],
                    "ciudad": fila["ciudad"],
                    "temperatura": float(fila["temperatura"]),
                    "humedad": float(fila["humedad"]),
                    "presion": float(fila["presion"]),
                    "tipo": fila["tipo"]
                })
    except FileNotFoundError:
        print(f"‚ùå Archivo CSV no encontrado: {nombre_archivo}")
    except Exception as e:
        print(f"‚ùå Error leyendo CSV: {e}")
    return datos

def leer_datos_json(nombre_archivo):
    datos = []
    try:
        with open(nombre_archivo, mode='r', encoding='utf-8') as archivo:
            json_data = json.load(archivo)
            for item in json_data:
                datos.append({
                    "fecha": item["fecha"],
                    "ciudad": item["ciudad"],
                    "temperatura": float(item["temperatura"]),
                    "humedad": float(item["humedad"]),
                    "presion": float(item["presion"]),
                    "tipo": item["tipo"]
                })
    except FileNotFoundError:
        print(f"‚ùå Archivo JSON no encontrado: {nombre_archivo}")
    except Exception as e:
        print(f"‚ùå Error leyendo JSON: {e}")
    return datos

def analizar_datos(datos):
    if not datos:
        print("‚ö†Ô∏è No hay datos para analizar.")
        return

    temperaturas = [d["temperatura"] for d in datos]
    humedades = [d["humedad"] for d in datos]
    presiones = [d["presion"] for d in datos]

    print("\nüìà Resultados del an√°lisis:")

    print(f"üå°Ô∏è Temperatura promedio: {statistics.mean(temperaturas):.2f} ¬∞C")
    if len(temperaturas) > 1:
        print(f"üìâ Desviaci√≥n est√°ndar de la temperatura: {statistics.stdev(temperaturas):.2f} ¬∞C")
    else:
        print("‚ö†Ô∏è No hay suficientes datos para calcular la desviaci√≥n est√°ndar de la temperatura.")

    print(f"üíß Humedad promedio: {statistics.mean(humedades):.2f} %")

    print(f"üß≠ Rango de presi√≥n atmosf√©rica: {min(presiones):.2f} - {max(presiones):.2f} hPa")

    ciudades = set(d["ciudad"] for d in datos)
    fechas = set(d["fecha"] for d in datos)
    print(f"üèôÔ∏è Ciudades analizadas: {', '.join(ciudades)}")
    print(f"üìÖ D√≠as analizados: {', '.join(fechas)}")

if __name__ == "__main__":
    archivo_csv = "clima_datos.csv"
    archivo_json = "clima_datos.json"

    # Cambia aqu√≠ a True para probar el archivo CSV o JSON
    usar_csv = True

    if usar_csv:
        print(f"üìÑ Analizando archivo CSV: {archivo_csv}")
        datos = leer_datos_csv(archivo_csv)
    else:
        print(f"üìÑ Analizando archivo JSON: {archivo_json}")
        datos = leer_datos_json(archivo_json)

    analizar_datos(datos)

"""# **C√≥digo principal y an√°lisis**

Habiendo terminado ambos scripts, podemos juntarlos en un √∫nico c√≥digo que primero muestre el clima de hoy junto con el pron√≥stico a 5 d√≠as, y luego realice un an√°lisis en base a los datos guardados en csv o json.
"""

import requests
import csv
import json
from datetime import datetime
import statistics

API_KEY = "f0f0c07c117721896152aeca0fbbe31a"

def get_weather_current(city):
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"
    res = requests.get(url)
    if res.status_code != 200:
        print(f"‚ùå Error: Ciudad '{city}' no encontrada o API fall√≥.")
        return None
    data = res.json()
    return {
        "fecha": datetime.utcfromtimestamp(data["dt"]).strftime("%Y-%m-%d"),
        "ciudad": data["name"],
        "temperatura": data["main"]["temp"],
        "humedad": data["main"]["humidity"],
        "presion": data["main"]["pressure"],
        "tipo": "actual"
    }

def get_weather_forecast(city):
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_KEY}&units=metric"
    res = requests.get(url)
    if res.status_code != 200:
        print(f"‚ùå Error: Ciudad '{city}' no encontrada o API fall√≥.")
        return []
    data = res.json()
    forecast_data = []
    # Filtrar solo pron√≥stico de las 18:00 cada d√≠a
    for item in data["list"]:
        dt_txt = item["dt_txt"]  # formato "YYYY-MM-DD HH:MM:SS"
        if dt_txt.endswith("18:00:00"):
            forecast_data.append({
                "fecha": dt_txt.split()[0],
                "ciudad": data["city"]["name"],
                "temperatura": item["main"]["temp"],
                "humedad": item["main"]["humidity"],
                "presion": item["main"]["pressure"],
                "tipo": "pronostico"
            })
    return forecast_data

def guardar_csv(datos, nombre_archivo):
    campos = ["fecha", "ciudad", "temperatura", "humedad", "presion", "tipo"]
    with open(nombre_archivo, mode='w', encoding='utf-8', newline='') as archivo:
        escritor = csv.DictWriter(archivo, fieldnames=campos)
        escritor.writeheader()
        escritor.writerows(datos)

def guardar_json(datos, nombre_archivo):
    with open(nombre_archivo, mode='w', encoding='utf-8') as archivo:
        json.dump(datos, archivo, indent=4, ensure_ascii=False)

def leer_datos_csv(nombre_archivo):
    datos = []
    try:
        with open(nombre_archivo, mode='r', encoding='utf-8') as archivo:
            lector = csv.DictReader(archivo)
            for fila in lector:
                datos.append({
                    "fecha": fila["fecha"],
                    "ciudad": fila["ciudad"],
                    "temperatura": float(fila["temperatura"]),
                    "humedad": float(fila["humedad"]),
                    "presion": float(fila["presion"]),
                    "tipo": fila["tipo"]
                })
    except FileNotFoundError:
        print(f"‚ùå Archivo CSV no encontrado: {nombre_archivo}")
    except Exception as e:
        print(f"‚ùå Error leyendo CSV: {e}")
    return datos

def leer_datos_json(nombre_archivo):
    datos = []
    try:
        with open(nombre_archivo, mode='r', encoding='utf-8') as archivo:
            json_data = json.load(archivo)
            for item in json_data:
                datos.append({
                    "fecha": item["fecha"],
                    "ciudad": item["ciudad"],
                    "temperatura": float(item["temperatura"]),
                    "humedad": float(item["humedad"]),
                    "presion": float(item["presion"]),
                    "tipo": item["tipo"]
                })
    except FileNotFoundError:
        print(f"‚ùå Archivo JSON no encontrado: {nombre_archivo}")
    except Exception as e:
        print(f"‚ùå Error leyendo JSON: {e}")
    return datos

def analizar_datos(datos):
    if not datos:
        print("‚ö†Ô∏è No hay datos para analizar.")
        return

    temperaturas = [d["temperatura"] for d in datos]
    humedades = [d["humedad"] for d in datos]
    presiones = [d["presion"] for d in datos]

    print("\nüìà Resultados del an√°lisis:")

    print(f"üå°Ô∏è Temperatura promedio: {statistics.mean(temperaturas):.2f} ¬∞C")
    if len(temperaturas) > 1:
        print(f"üìâ Desviaci√≥n est√°ndar de la temperatura: {statistics.stdev(temperaturas):.2f} ¬∞C")
    else:
        print("‚ö†Ô∏è No hay suficientes datos para calcular la desviaci√≥n est√°ndar de la temperatura.")

    print(f"üíß Humedad promedio: {statistics.mean(humedades):.2f} %")

    print(f"üß≠ Rango de presi√≥n atmosf√©rica: {min(presiones):.2f} - {max(presiones):.2f} hPa")

    ciudades = set(d["ciudad"] for d in datos)
    fechas = set(d["fecha"] for d in datos)
    print(f"üèôÔ∏è Ciudades analizadas: {', '.join(ciudades)}")
    print(f"üìÖ D√≠as analizados: {', '.join(fechas)}")

def mostrar_datos(actual, pronostico):
    print(f"\nüåÜ Clima actual en {actual['ciudad']} ({actual['fecha']}):")
    print(f"  Temperatura: {actual['temperatura']} ¬∞C")
    print(f"  Humedad: {actual['humedad']} %")
    print(f"  Presi√≥n: {actual['presion']} hPa")

    print("\nüìÖ Pron√≥stico a 5 d√≠as (18:00 hrs):")
    for p in pronostico:
        print(f"  {p['fecha']} -> Temp: {p['temperatura']} ¬∞C, Humedad: {p['humedad']} %, Presi√≥n: {p['presion']} hPa")

def main():
    ciudad = input("üåÜ Ingrese la ciudad para consultar el clima: ").strip()
    if not ciudad:
        print("‚ùå No ingres√≥ ninguna ciudad.")
        return

    actual = get_weather_current(ciudad)
    if actual is None:
        return

    pronostico = get_weather_forecast(ciudad)

    mostrar_datos(actual, pronostico)

    # Guardar solo el clima actual y pron√≥stico
    datos_guardar = [actual] + pronostico

    guardar_csv(datos_guardar, "clima_datos.csv")
    guardar_json(datos_guardar, "clima_datos.json")

    print(f"\n‚úÖ Datos guardados en 'clima_datos.csv' y 'clima_datos.json'")

    # Leer datos para an√°lisis
    datos_csv = leer_datos_csv("clima_datos.csv")

    print("\n--- An√°lisis basado en CSV ---")
    analizar_datos(datos_csv)

if __name__ == "__main__":
    main()

"""# **Documentaci√≥n del Proyecto: An√°lisis de Clima Actual y Pron√≥stico a 5 D√≠as**
**1. Objetivo del Proyecto**

El proyecto consiste en consultar, mostrar y analizar datos meteorol√≥gicos (clima actual y pron√≥stico a 5 d√≠as) para una ciudad dada, utilizando la API p√∫blica de OpenWeather. El an√°lisis ayuda a entender la temperatura promedio, humedad y presi√≥n atmosf√©rica, para evaluar la estabilidad clim√°tica y posibles variaciones.

**2. Proceso de Extracci√≥n y Lectura de Datos**

Obtenci√≥n de Datos:
API utilizada: OpenWeather (https://openweathermap.org/api)

**Datos solicitados:**

Clima actual (/weather endpoint)

Pron√≥stico a 5 d√≠as cada 3 horas (/forecast endpoint)

**Par√°metros:**

Ciudad ingresada por el usuario.

Unidades m√©tricas (grados Celsius).

API Key para autenticaci√≥n.

**Lectura y Validaci√≥n:**
Se consultan los endpoints de la API con requests.

Se verifica el c√≥digo de respuesta HTTP (200 OK).

Si la respuesta es inv√°lida o la ciudad no existe, se notifica y el programa termina.

De los datos JSON recibidos, se extraen solo campos esenciales:

Fecha

Ciudad

Temperatura (¬∞C)

Humedad (%)

Presi√≥n atmosf√©rica (hPa)

Tipo (actual o pron√≥stico)

Validaci√≥n en el C√≥digo:
Comprobaci√≥n de existencia y estado de respuesta.

Conversi√≥n segura a tipos num√©ricos (float) al leer archivos CSV o JSON para evitar errores en c√°lculos.

Manejo de excepciones para archivos no encontrados o datos malformados.

**3. Preparaci√≥n y Almacenamiento de Datos**

Se guarda la informaci√≥n actual y el pron√≥stico (filtrado solo para las 18:00 hrs de cada d√≠a) en dos formatos:

CSV (clima_datos.csv)

JSON (clima_datos.json)

El nombre de archivo es fijo para facilitar la lectura posterior y evitar problemas con fechas o nombres variables.

Solo se guardan datos relevantes para an√°lisis posteriores, no se almacenan datos auxiliares de la API.

**4. An√°lisis de Datos**

**Lectura para An√°lisis:**
Los datos se leen desde los archivos CSV o JSON.

Se parsean y convierten a estructuras de Python (listas de diccionarios).

Se filtran y convierten los valores num√©ricos para c√°lculos estad√≠sticos.

**C√°lculos Estad√≠sticos:**

**Temperatura promedio:** Media aritm√©tica de todas las temperaturas recogidas.

Desviaci√≥n est√°ndar de temperatura: Indica la variabilidad de las temperaturas.

**Humedad promedio:** Media de los valores de humedad.

**Rango de presi√≥n atmosf√©rica:** Diferencia entre la presi√≥n m√≠nima y m√°xima observadas, para detectar variaciones.

**Resultados ejemplo:**
"""

üå°Ô∏è Temperatura promedio: 21.85 ¬∞C
üìâ Desviaci√≥n est√°ndar de la temperatura: 2.34 ¬∞C
üíß Humedad promedio: 65.20 %
üß≠ Rango de presi√≥n atmosf√©rica: 1010.00 - 1022.00 hPa
üèôÔ∏è Ciudades analizadas: CiudadEjemplo
üìÖ D√≠as analizados: 2025-05-15, 2025-05-16, 2025-05-17

"""Estos valores ayudan a responder preguntas como:

¬øCu√°l es la temperatura promedio durante los d√≠as analizados?

¬øQu√© tan estable o variable es la temperatura (desviaci√≥n est√°ndar)?

¬øC√≥mo var√≠a la humedad relativa?

¬øExisten cambios notables en la presi√≥n atmosf√©rica que puedan indicar cambios meteorol√≥gicos?

**5. Relaci√≥n con el Problema Definido**
El problema inicial era obtener y analizar informaci√≥n meteorol√≥gica para evaluar la estabilidad y variabilidad clim√°tica en una ciudad espec√≠fica. El c√≥digo desarrollado permite:

Consultar datos en tiempo real y el pron√≥stico a 5 d√≠as.

Guardar solo los datos esenciales para evitar almacenamiento innecesario.

Calcular estad√≠sticas b√°sicas que permiten evaluar la estabilidad del clima.

Por ejemplo, una baja desviaci√≥n est√°ndar en la temperatura y un rango estrecho en la presi√≥n indicar√≠an un clima estable durante el per√≠odo analizado, mientras que valores m√°s altos pueden sugerir cambios abruptos o inestabilidad.

**6. Consideraciones y Mejoras Futuras**

Se podr√≠an agregar m√°s variables para an√°lisis, como velocidad del viento o precipitaci√≥n.

Implementar an√°lisis visual con gr√°ficos para facilitar la interpretaci√≥n.

Automatizar la ejecuci√≥n diaria para obtener datos en diferentes horas.

Incluir validaciones m√°s avanzadas y manejo de errores.

"""