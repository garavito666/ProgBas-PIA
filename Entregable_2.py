# -*- coding: utf-8 -*-
"""Entregable2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13efCCwbsIElgeX0kQ_O1mVznyKGsL3Cw

# **Entregable semana 2**
**1. Extraer los datos**

El script obtiene los datos meteorol√≥gicos en formato JSON, directamente desde la API, tanto para:

-El clima actual (con valores como temperatura, humedad, viento, etc.)

-El pron√≥stico de los pr√≥ximos cinco d√≠as, con datos cada 3 horas.

-Se revis√≥ la estructura de los datos para asegurar que fueran √∫tiles, consistentes y en el idioma deseado.

**2. Limpiar los datos**

En el procesamiento:

-Se eliminaron campos irrelevantes como coordenadas geogr√°ficas, c√≥digo de zona horaria o identificadores internos.

-Se estandarizaron los valores num√©ricos, como la temperatura (a ¬∞C o ¬∞F) y la velocidad del viento (en m/s o mph).

-Se extrajeron solo los datos de mediod√≠a en el pron√≥stico para evitar redundancia.
"""

!pip install requests
!pip install plotext
!pip install openpyxl

import requests
import json
import csv
from datetime import datetime, timezone
import time

API_key = "f0f0c07c117721896152aeca0fbbe31a"

def obtener_clima_actual(ciudad):
    url = f"https://api.openweathermap.org/data/2.5/weather?q={ciudad}&units=metric&appid={API_key}"
    res = requests.get(url)
    if res.status_code != 200:
        print("‚ùå Ciudad no encontrada o error en la petici√≥n.")
        return None
    data = res.json()
    temperatura = data["main"]["temp"]
    humedad = data["main"]["humidity"]
    presion = data["main"]["pressure"]
    return {
        "fecha": datetime.now().strftime("%Y-%m-%d"),
        "ciudad": ciudad,
        "temperatura": temperatura,
        "humedad": humedad,
        "presion": presion,
        "tipo": "actual"
    }

def obtener_pronostico(ciudad):
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={ciudad}&units=metric&appid={API_key}"
    res = requests.get(url)
    if res.status_code != 200:
        print("‚ùå Ciudad no encontrada o error en la petici√≥n.")
        return []
    data = res.json()
    pronosticos = []

    # Queremos solo 1 pron√≥stico por d√≠a a las 18:00 hrs
    fechas_procesadas = set()
    for item in data["list"]:
        dt_txt = item["dt_txt"]  # formato 'YYYY-MM-DD HH:MM:SS'
        fecha_str, hora_str = dt_txt.split()
        if hora_str == "18:00:00" and fecha_str not in fechas_procesadas:
            fechas_procesadas.add(fecha_str)
            pronosticos.append({
                "fecha": fecha_str,
                "ciudad": ciudad,
                "temperatura": item["main"]["temp"],
                "humedad": item["main"]["humidity"],
                "presion": item["main"]["pressure"],
                "tipo": "pronostico"
            })
    return pronosticos

def guardar_csv(nombre_archivo, datos):
    campos = ["fecha", "ciudad", "temperatura", "humedad", "presion", "tipo"]
    try:
        with open(nombre_archivo, mode='w', newline='', encoding='utf-8') as archivo:
            writer = csv.DictWriter(archivo, fieldnames=campos)
            writer.writeheader()
            writer.writerows(datos)
        print(f"‚úÖ Datos guardados en {nombre_archivo}")
    except Exception as e:
        print(f"‚ùå Error al guardar CSV: {e}")

def guardar_json(nombre_archivo, datos):
    try:
        with open(nombre_archivo, mode='w', encoding='utf-8') as archivo:
            json.dump(datos, archivo, indent=4)
        print(f"‚úÖ Datos guardados en {nombre_archivo}")
    except Exception as e:
        print(f"‚ùå Error al guardar JSON: {e}")

def main():
    ciudad = input("üèôÔ∏è Introduce el nombre de la ciudad para obtener el clima: ").strip()
    if not ciudad:
        print("‚ùå Debes ingresar un nombre de ciudad v√°lido.")
        return

    clima_actual = obtener_clima_actual(ciudad)
    if clima_actual is None:
        return

    pronostico = obtener_pronostico(ciudad)
    if not pronostico:
        print("‚ö†Ô∏è No se pudo obtener pron√≥stico, solo se guardar√° el clima actual.")
        datos_guardar = [clima_actual]
    else:
        datos_guardar = [clima_actual] + pronostico

    # Guardar en archivos fijos sin fecha ni hora en el nombre
    guardar_csv("clima_datos.csv", datos_guardar)
    guardar_json("clima_datos.json", datos_guardar)

    print("\nüìä Clima actual y pron√≥stico (solo temperaturas y humedad):")
    for dato in datos_guardar:
        tipo = "Actual" if dato["tipo"] == "actual" else "Pron√≥stico"
        print(f"{tipo} - {dato['fecha']} - {dato['ciudad']}: {dato['temperatura']}¬∞C, Humedad: {dato['humedad']}%, Presi√≥n: {dato['presion']} hPa")

if __name__ == "__main__":
    main()

"""**üóÇÔ∏è Dise√±o de la Nueva Estructura de Datos**

Para facilitar el an√°lisis del clima, se dise√±√≥ una estructura de datos clara y concisa basada en una lista de diccionarios, donde cada diccionario representa un registro meteorol√≥gico con los siguientes campos:
"""

{
    "fecha": "2025-05-15 12:00",
    "ciudad": "Madrid",
    "temperatura": "21.5¬∞C",
    "humedad": "53%",
    "presion": "1012 hPa"
}

"""Este dise√±o permite:

Agrupar registros por ciudad o fecha.

Acceder f√°cilmente a variables clave como temperatura y humedad.

Exportar sin p√©rdida de formato a CSV y JSON.

# **üìù Documentaci√≥n del Proceso**
üîπ M√©todos de extracci√≥n de datos
Herramienta utilizada: requests

API: OpenWeather

Formato: JSON

Autenticaci√≥n: API Key en la URL de la solicitud.

üîπ T√©cnicas de limpieza aplicadas
Eliminaci√≥n de campos innecesarios como coordenadas, zona horaria, etc.

Conversi√≥n de unidades de temperatura (K ‚Üí ¬∞C o ¬∞F).

Redondeo de valores flotantes a 2 decimales.

Uniformizaci√≥n de formatos de fecha y hora.

üîπ Validaciones y transformaciones:
Verificaci√≥n del c√≥digo de estado HTTP (200 OK).

Conversi√≥n de strings a float o int para an√°lisis num√©rico.

"""